package handler

import (
	"context"
	"regexp"
	"strings"

	"github.com/go-telegram/bot"
	"github.com/go-telegram/bot/models"
)

// TextMessageHandler: –µ—Å–ª–∏ –æ–∂–∏–¥–∞–µ—Ç—Å—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ, –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–æ–≤–æ–µ –∏–º—è; –∏–Ω–∞—á–µ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ—Ç
func (h Handler) TextMessageHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	if update.Message == nil { return }
	chatID := update.Message.Chat.ID
	newName := strings.TrimSpace(update.Message.Text)

	// –ï—Å–ª–∏ –Ω–µ—Ç –æ–∂–∏–¥–∞–Ω–∏—è ‚Äî –≤—ã—Ö–æ–¥–∏–º
	subID, ok := pendingRenames[chatID]
	if !ok { return }

	// –í–∞–ª–∏–¥–∞—Ü–∏—è
	if len(newName) < 1 || len(newName) > 50 { 
		_, _ = b.SendMessage(ctx, &bot.SendMessageParams{ ChatID: chatID, ParseMode: models.ParseModeHTML, Text: "‚ö†Ô∏è –ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞." })
		return 
	}
	if regexp.MustCompile(`[<>"'&]`).MatchString(newName) {
		_, _ = b.SendMessage(ctx, &bot.SendMessageParams{ ChatID: chatID, ParseMode: models.ParseModeHTML, Text: "‚ö†Ô∏è –ò–º—è –Ω–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–∏–º–≤–æ–ª—ã: < > \" ' &" })
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –∏ –ø–æ–¥–ø–∏—Å–∫—É, –æ–±–Ω–æ–≤–ª—è–µ–º –∏–º—è
	customer, err := h.customerRepository.FindByTelegramId(ctx, chatID); if err != nil || customer == nil { delete(pendingRenames, chatID); return }
	sub, err := h.subscriptionRepository.GetSubscriptionByID(ctx, subID); if err != nil || sub == nil { delete(pendingRenames, chatID); return }
	if sub.CustomerID != customer.ID { delete(pendingRenames, chatID); return }
	_ = h.subscriptionRepository.UpdateSubscriptionName(ctx, subID, newName)
	delete(pendingRenames, chatID)
	_, _ = b.SendMessage(ctx, &bot.SendMessageParams{ ChatID: chatID, ParseMode: models.ParseModeHTML, Text: "‚úÖ –ò–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ!", ReplyMarkup: models.InlineKeyboardMarkup{ InlineKeyboard: [][]models.InlineKeyboardButton{ { {Text:"üìã –ú–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏", CallbackData: CallbackMySubscriptions} }, { {Text:"‚¨ÖÔ∏è –ù–∞–∑–∞–¥", CallbackData: CallbackStart} }, } } })
}
