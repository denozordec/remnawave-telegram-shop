package handler

import (
	"context"
	"fmt"
	"net/url"
	"strconv"
	"strings"
	"time"

	"github.com/go-telegram/bot"
	"github.com/go-telegram/bot/models"
	"log/slog"

	"remnawave-tg-shop-bot/internal/database"
)

// parseCallbackData parses callback data in format "action?key1=value1&key2=value2"
func parseCallbackData(callbackData string) map[string]string {
	result := make(map[string]string)
	
	parts := strings.SplitN(callbackData, "?", 2)
	if len(parts) < 2 {
		return result
	}
	
	queryString := parts[1]
	values, err := url.ParseQuery(queryString)
	if err != nil {
		return result
	}
	
	for key, vals := range values {
		if len(vals) > 0 {
			result[key] = vals[0]
		}
	}
	
	return result
}

// MySubscriptionsCallbackHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∫–∞–∑ –≤—Å–µ—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func (h Handler) MySubscriptionsCallbackHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	callback := update.CallbackQuery.Message.Message
	langCode := update.CallbackQuery.From.LanguageCode
	chatID := callback.Chat.ID

	// –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
	customer, err := h.customerRepository.FindByTelegramId(ctx, chatID)
	if err != nil {
		slog.Error("Error finding customer", "error", err, "chatID", chatID)
		return
	}
	if customer == nil {
		slog.Error("Customer not found", "chatID", chatID)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
	activeSubscriptions, err := h.subscriptionRepository.GetActiveSubscriptions(ctx, customer.ID)
	if err != nil {
		slog.Error("Error getting active subscriptions", "error", err, "customerID", customer.ID)
		return
	}

	var messageText string
	var keyboard [][]models.InlineKeyboardButton

	if len(activeSubscriptions) == 0 {
		// –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
		messageText = h.translation.GetText(langCode, "no_active_subscriptions")
		keyboard = [][]models.InlineKeyboardButton{
			{{Text: h.translation.GetText(langCode, "buy_button"), CallbackData: CallbackTrial}},
			{{Text: h.translation.GetText(langCode, "back_button"), CallbackData: CallbackStart}},
		}
	} else {
		// –ö—Ä–∞—Å–∏–≤—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫ –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã
		messageText = "üìã <b>–í–∞—à–∏ –ø–æ–¥–ø–∏—Å–∫–∏:</b>\n\n"
		messageText += "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n"

		for i, sub := range activeSubscriptions {
			// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏—Å—Ç–µ—á–µ–Ω–∏—è
			expireDate := sub.ExpireAt.Format("02.01.2006 15:04")
			
			// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
			status := "‚úÖ"
			statusText := "–ê–∫—Ç–∏–≤–Ω–∞"
			if sub.ExpireAt.Before(time.Now().Add(24 * time.Hour)) {
				status = "‚ö†Ô∏è"
				statusText = "–ò—Å—Ç–µ–∫–∞–µ—Ç"
			}
			if sub.ExpireAt.Before(time.Now()) {
				status = "‚ùå"
				statusText = "–ò—Å—Ç–µ–∫–ª–∞"
			}

			// –ö—Ä–∞—Å–∏–≤–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∫–∞–∂–¥–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
			messageText += fmt.Sprintf("‚îÇ %s <b>%s</b> %s\n", status, sub.Name, strings.Repeat(" ", max(20-len(sub.Name), 0)))
			messageText += fmt.Sprintf("‚îÇ üìÖ %s\n", expireDate)
			messageText += fmt.Sprintf("‚îÇ üü¢ %s\n", statusText)
			
			if i < len(activeSubscriptions)-1 {
				messageText += "‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§\n"
			}

			// –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ (—Å –∫–Ω–æ–ø–∫–æ–π –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è)
			subscriptionButtons := []models.InlineKeyboardButton{
				{Text: fmt.Sprintf("üîó %s", sub.Name), URL: sub.SubscriptionLink},
				{Text: fmt.Sprintf("‚úèÔ∏è –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å"), CallbackData: fmt.Sprintf("%s?id=%d", CallbackRenameSubscription, sub.ID)},
			}

			// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö)
			if sub.ExpireAt.After(time.Now()) {
				subscriptionButtons = append(subscriptionButtons,
					models.InlineKeyboardButton{
						Text:         fmt.Sprintf("üóë %s", h.translation.GetText(langCode, "deactivate_button")),
						CallbackData: fmt.Sprintf("%s?id=%d", CallbackDeactivateSubscription, sub.ID),
					},
				)
			}

			keyboard = append(keyboard, subscriptionButtons)
		}

		// –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
		messageText += "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n\n"

		// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
		keyboard = append(keyboard, []models.InlineKeyboardButton{
			{Text: h.translation.GetText(langCode, "add_subscription_button"), CallbackData: CallbackTrial},
		})
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
	keyboard = append(keyboard, []models.InlineKeyboardButton{
		{Text: h.translation.GetText(langCode, "back_button"), CallbackData: CallbackStart},
	})

	_, err = b.EditMessageText(ctx, &bot.EditMessageTextParams{
		ChatID:    callback.Chat.ID,
		MessageID: callback.ID,
		ParseMode: models.ParseModeHTML,
		ReplyMarkup: models.InlineKeyboardMarkup{
			InlineKeyboard: keyboard,
		},
		Text: messageText,
	})

	if err != nil {
		slog.Error("Error editing message", "error", err)
	}
}

// RenameSubscriptionCallbackHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞—á–∞–ª–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
func (h Handler) RenameSubscriptionCallbackHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	callback := update.CallbackQuery.Message.Message
	langCode := update.CallbackQuery.From.LanguageCode
	chatID := callback.Chat.ID

	// –ü–∞—Ä—Å–∏–º ID –ø–æ–¥–ø–∏—Å–∫–∏
	callbackQuery := parseCallbackData(update.CallbackQuery.Data)
	subscriptionIDStr, exists := callbackQuery["id"]
	if !exists {
		slog.Error("Subscription ID not found in callback data")
		return
	}

	subscriptionID, err := strconv.ParseInt(subscriptionIDStr, 10, 64)
	if err != nil {
		slog.Error("Error parsing subscription ID", "error", err)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
	customer, err := h.customerRepository.FindByTelegramId(ctx, chatID)
	if err != nil {
		slog.Error("Error finding customer", "error", err, "chatID", chatID)
		return
	}
	if customer == nil {
		slog.Error("Customer not found", "chatID", chatID)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
	subscription, err := h.subscriptionRepository.GetSubscriptionByID(ctx, subscriptionID)
	if err != nil {
		slog.Error("Error getting subscription", "error", err, "subscriptionID", subscriptionID)
		return
	}
	if subscription == nil {
		slog.Error("Subscription not found", "subscriptionID", subscriptionID)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–∞–¥–µ–Ω–∏–µ
	if subscription.CustomerID != customer.ID {
		slog.Error("Subscription doesn't belong to this customer", "subscriptionID", subscriptionID, "customerID", customer.ID)
		return
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –∏–º–µ–Ω–∏
	renameText := fmt.Sprintf("‚úèÔ∏è <b>–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\nüìù –¢–µ–∫—É—â–µ–µ –∏–º—è: <b>%s</b>\n\n‚öôÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:", subscription.Name)
	
	_, err = b.EditMessageText(ctx, &bot.EditMessageTextParams{
		ChatID:    callback.Chat.ID,
		MessageID: callback.ID,
		ParseMode: models.ParseModeHTML,
		ReplyMarkup: models.InlineKeyboardMarkup{
			InlineKeyboard: [][]models.InlineKeyboardButton{
				{{Text: "‚ùå –û—Ç–º–µ–Ω–∞", CallbackData: CallbackMySubscriptions}},
			},
		},
		Text: renameText,
	})

	if err != nil {
		slog.Error("Error editing message", "error", err)
	}
}

// DeactivateSubscriptionCallbackHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—é –ø–æ–¥–ø–∏—Å–∫–∏
func (h Handler) DeactivateSubscriptionCallbackHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	callback := update.CallbackQuery.Message.Message
	langCode := update.CallbackQuery.From.LanguageCode
	chatID := callback.Chat.ID

	// –ü–∞—Ä—Å–∏–º ID –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ callback data
	callbackQuery := parseCallbackData(update.CallbackQuery.Data)
	subscriptionIDStr, exists := callbackQuery["id"]
	if !exists {
		slog.Error("Subscription ID not found in callback data")
		return
	}

	subscriptionID, err := strconv.ParseInt(subscriptionIDStr, 10, 64)
	if err != nil {
		slog.Error("Error parsing subscription ID", "error", err)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
	customer, err := h.customerRepository.FindByTelegramId(ctx, chatID)
	if err != nil {
		slog.Error("Error finding customer", "error", err, "chatID", chatID)
		return
	}
	if customer == nil {
		slog.Error("Customer not found", "chatID", chatID)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–ª–∞–¥–µ–Ω–∏—è
	subscription, err := h.subscriptionRepository.GetSubscriptionByID(ctx, subscriptionID)
	if err != nil {
		slog.Error("Error getting subscription", "error", err, "subscriptionID", subscriptionID)
		return
	}
	if subscription == nil {
		slog.Error("Subscription not found", "subscriptionID", subscriptionID)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —ç—Ç–æ–º—É –∫–ª–∏–µ–Ω—Ç—É
	if subscription.CustomerID != customer.ID {
		slog.Error("Subscription doesn't belong to this customer", "subscriptionID", subscriptionID, "customerID", customer.ID)
		return
	}

	// –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
	err = h.subscriptionRepository.DeactivateSubscription(ctx, subscriptionID)
	if err != nil {
		slog.Error("Error deactivating subscription", "error", err, "subscriptionID", subscriptionID)
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏
	successText := fmt.Sprintf("‚úÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞</b>\n\nüóë %s —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞", subscription.Name)

	_, err = b.EditMessageText(ctx, &bot.EditMessageTextParams{
		ChatID:    callback.Chat.ID,
		MessageID: callback.ID,
		ParseMode: models.ParseModeHTML,
		ReplyMarkup: models.InlineKeyboardMarkup{
			InlineKeyboard: [][]models.InlineKeyboardButton{
				{{Text: h.translation.GetText(langCode, "my_subscriptions_button"), CallbackData: CallbackMySubscriptions}},
				{{Text: h.translation.GetText(langCode, "back_button"), CallbackData: CallbackStart}},
			},
		},
		Text: successText,
	})

	if err != nil {
		slog.Error("Error editing message", "error", err)
	}

	slog.Info("Subscription deactivated", "subscriptionID", subscriptionID, "customerID", customer.ID)
}

// GetActiveSubscriptionsCount –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
func (h Handler) GetActiveSubscriptionsCount(ctx context.Context, customerID int64) (int, error) {
	activeSubscriptions, err := h.subscriptionRepository.GetActiveSubscriptions(ctx, customerID)
	if err != nil {
		return 0, err
	}
	return len(activeSubscriptions), nil
}

// GetSubscriptionsList –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ connect handler
func (h Handler) GetSubscriptionsList(ctx context.Context, customer *database.Customer, langCode string) (string, [][]models.InlineKeyboardButton) {
	activeSubscriptions, err := h.subscriptionRepository.GetActiveSubscriptions(ctx, customer.ID)
	if err != nil {
		slog.Error("Error getting active subscriptions", "error", err)
		return h.translation.GetText(langCode, "error_getting_subscriptions"), [][]models.InlineKeyboardButton{
			{{Text: h.translation.GetText(langCode, "back_button"), CallbackData: CallbackStart}},
		}
	}

	if len(activeSubscriptions) == 0 {
		return h.translation.GetText(langCode, "no_active_subscriptions"), [][]models.InlineKeyboardButton{
			{{Text: h.translation.GetText(langCode, "buy_button"), CallbackData: CallbackTrial}},
			{{Text: h.translation.GetText(langCode, "back_button"), CallbackData: CallbackStart}},
		}
	}

	// –ö—Ä–∞—Å–∏–≤–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –¥–ª—è connect —Å–æ–æ–±—â–µ–Ω–∏—è
	messageText := "üéÜ <b>–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:</b>\n\n"
	var keyboard [][]models.InlineKeyboardButton

	for _, sub := range activeSubscriptions {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–∞ –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞
		if sub.ExpireAt.After(time.Now()) {
			expireDate := sub.ExpireAt.Format("02.01.2006 15:04")
			messageText += fmt.Sprintf("‚úÖ <b>%s</b>\nüìÖ %s %s\n\n", sub.Name, h.translation.GetText(langCode, "expires_at"), expireDate)
			
			// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —ç—Ç–æ–π –ø–æ–¥–ø–∏—Å–∫–µ
			keyboard = append(keyboard, []models.InlineKeyboardButton{
				{Text: fmt.Sprintf("üì± %s", sub.Name), URL: sub.SubscriptionLink},
			})
		}
	}

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
	keyboard = append(keyboard, []models.InlineKeyboardButton{
		{Text: h.translation.GetText(langCode, "my_subscriptions_button"), CallbackData: CallbackMySubscriptions},
	})
	keyboard = append(keyboard, []models.InlineKeyboardButton{
		{Text: h.translation.GetText(langCode, "add_subscription_button"), CallbackData: CallbackTrial},
	})
	keyboard = append(keyboard, []models.InlineKeyboardButton{
		{Text: h.translation.GetText(langCode, "back_button"), CallbackData: CallbackStart},
	})

	return messageText, keyboard
}

func max(a, b int) int {
	if a > b { return a }
	return b
}
