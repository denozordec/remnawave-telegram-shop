package handler

import (
	"context"
	"fmt"
	"github.com/go-telegram/bot"
	"github.com/go-telegram/bot/models"
	"log/slog"
	"remnawave-tg-shop-bot/internal/config"
	"remnawave-tg-shop-bot/internal/notification"
	"strings"
)

const (
	CallbackBroadcastMenu     = "broadcast_menu"
	CallbackBroadcastToAll    = "broadcast_to_all"
	CallbackBroadcastToAdmins = "broadcast_to_admins"
	CallbackBroadcastConfirm  = "broadcast_confirm"
	CallbackBroadcastCancel   = "broadcast_cancel"
)

// BroadcastMenuHandler –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
func (h Handler) BroadcastMenuHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	message := "üì¢ <b>–ú–µ–Ω—é —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏:"
	
	_, err := b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID:    update.Message.Chat.ID,
		Text:      message,
		ParseMode: models.ParseModeHTML,
		ReplyMarkup: models.InlineKeyboardMarkup{
			InlineKeyboard: [][]models.InlineKeyboardButton{
				{
					{Text: "üì§ –í—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", CallbackData: CallbackBroadcastToAll},
				},
				{
					{Text: "üë• –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º", CallbackData: CallbackBroadcastToAdmins},
				},
			},
		},
	})
	
	if err != nil {
		slog.Error("Error sending broadcast menu", err)
	}
}

// BroadcastTypeHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∏–ø–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
func (h Handler) BroadcastTypeHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	callback := update.CallbackQuery
	callbackData := callback.Data
	
	var broadcastType string
	var buttonText string
	
	switch callbackData {
	case CallbackBroadcastToAll:
		broadcastType = "all"
		buttonText = "üì§ –í—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"
	case CallbackBroadcastToAdmins:
		broadcastType = "admins"
		buttonText = "üë• –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º"
	default:
		return
	}
	
	// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ –∫—ç—à–µ –∏–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
	// –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é, –Ω–æ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—ç—à
	h.cache.Set("broadcast_type_"+fmt.Sprint(callback.From.ID), broadcastType)
	
	message := fmt.Sprintf("üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∞: %s</b>\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:", buttonText)
	
	_, err := b.EditMessageText(ctx, &bot.EditMessageTextParams{
		ChatID:    callback.Message.Chat.ID,
		MessageID: callback.Message.ID,
		Text:      message,
		ParseMode: models.ParseModeHTML,
		ReplyMarkup: models.InlineKeyboardMarkup{
			InlineKeyboard: [][]models.InlineKeyboardButton{
				{
					{Text: "‚ùå –û—Ç–º–µ–Ω–∞", CallbackData: CallbackBroadcastCancel},
				},
			},
		},
	})
	
	if err != nil {
		slog.Error("Error editing broadcast type message", err)
	}
	
	// –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
	_, err = b.AnswerCallbackQuery(ctx, &bot.AnswerCallbackQueryParams{
		CallbackQueryID: callback.ID,
	})
	if err != nil {
		slog.Error("Error answering callback query", err)
	}
}

// BroadcastMessageHandler –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
func (h Handler) BroadcastMessageHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω
	if update.Message.From.ID != config.GetAdminTelegramId() {
		return
	}
	
	// –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–∑ –∫—ç—à–∞
	broadcastType, exists := h.cache.Get("broadcast_type_" + fmt.Sprint(update.Message.From.ID))
	if !exists {
		return
	}
	
	message := update.Message.Text
	if message == "" {
		// –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
		return
	}
	
	// –£–¥–∞–ª—è–µ–º —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–∑ –∫—ç—à–∞
	h.cache.Delete("broadcast_type_" + fmt.Sprint(update.Message.From.ID))
	
	// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
	confirmKeyboard := [][]models.InlineKeyboardButton{
		{
			{Text: "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", CallbackData: CallbackBroadcastConfirm + ":" + broadcastType.(string)},
			{Text: "‚ùå –û—Ç–º–µ–Ω–∞", CallbackData: CallbackBroadcastCancel},
		},
	}
	
	var broadcastTypeText string
	switch broadcastType.(string) {
	case "all":
		broadcastTypeText = "üì§ –í—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"
	case "admins":
		broadcastTypeText = "üë• –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º"
	}
	
	previewMessage := fmt.Sprintf("üì¢ <b>–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n<b>–¢–∏–ø:</b> %s\n<b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>\n\n%s", broadcastTypeText, message)
	
	_, err := b.SendMessage(ctx, &bot.SendMessageParams{
		ChatID:    update.Message.Chat.ID,
		Text:      previewMessage,
		ParseMode: models.ParseModeHTML,
		ReplyMarkup: models.InlineKeyboardMarkup{
			InlineKeyboard: confirmKeyboard,
		},
	})
	
	if err != nil {
		slog.Error("Error sending broadcast preview", err)
	}
}

// BroadcastConfirmHandler –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É
func (h Handler) BroadcastConfirmHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	callback := update.CallbackQuery
	callbackData := callback.Data
	
	// –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–∑ callback data
	parts := strings.Split(callbackData, ":")
	if len(parts) != 2 {
		return
	}
	
	broadcastType := parts[1]
	
	// –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
	messageText := ""
	if callback.Message != nil && callback.Message.Text != "" {
		// –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
		lines := strings.Split(callback.Message.Text, "\n")
		for i, line := range lines {
			if strings.Contains(line, "–°–æ–æ–±—â–µ–Ω–∏–µ:") {
				if i+1 < len(lines) {
					messageText = strings.Join(lines[i+1:], "\n")
					break
				}
			}
		}
	}
	
	if messageText == "" {
		_, err := b.AnswerCallbackQuery(ctx, &bot.AnswerCallbackQueryParams{
			CallbackQueryID: callback.ID,
			Text:            "‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è",
		})
		if err != nil {
			slog.Error("Error answering callback query", err)
		}
		return
	}
	
	// –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å —Ä–∞—Å—Å—ã–ª–∫–∏
	broadcastService := notification.NewBroadcastService(h.customerRepository, b, h.translation)
	
	var err error
	switch broadcastType {
	case "all":
		err = broadcastService.SendBroadcastToAll(ctx, messageText, models.ParseModeHTML)
	case "admins":
		err = broadcastService.SendBroadcastToAdmins(ctx, messageText, models.ParseModeHTML)
	}
	
	if err != nil {
		slog.Error("Error sending broadcast", err)
		_, err = b.AnswerCallbackQuery(ctx, &bot.AnswerCallbackQueryParams{
			CallbackQueryID: callback.ID,
			Text:            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏",
		})
		if err != nil {
			slog.Error("Error answering callback query", err)
		}
		return
	}
	
	// –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
	resultMessage := fmt.Sprintf("‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!</b>\n\n–¢–∏–ø: %s\n–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.", 
		map[string]string{"all": "üì§ –í—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", "admins": "üë• –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º"}[broadcastType])
	
	_, err = b.EditMessageText(ctx, &bot.EditMessageTextParams{
		ChatID:    callback.Message.Chat.ID,
		MessageID: callback.Message.ID,
		Text:      resultMessage,
		ParseMode: models.ParseModeHTML,
	})
	
	if err != nil {
		slog.Error("Error editing broadcast result message", err)
	}
	
	// –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
	_, err = b.AnswerCallbackQuery(ctx, &bot.AnswerCallbackQueryParams{
		CallbackQueryID: callback.ID,
		Text:            "‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞",
	})
	if err != nil {
		slog.Error("Error answering callback query", err)
	}
}

// BroadcastCancelHandler –æ—Ç–º–µ–Ω—è–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É
func (h Handler) BroadcastCancelHandler(ctx context.Context, b *bot.Bot, update *models.Update) {
	callback := update.CallbackQuery
	
	// –£–¥–∞–ª—è–µ–º —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–∑ –∫—ç—à–∞
	h.cache.Delete("broadcast_type_" + fmt.Sprint(callback.From.ID))
	
	_, err := b.EditMessageText(ctx, &bot.EditMessageTextParams{
		ChatID:    callback.Message.Chat.ID,
		MessageID: callback.Message.ID,
		Text:      "‚ùå <b>–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞</b>",
		ParseMode: models.ParseModeHTML,
	})
	
	if err != nil {
		slog.Error("Error editing broadcast cancel message", err)
	}
	
	// –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query
	_, err = b.AnswerCallbackQuery(ctx, &bot.AnswerCallbackQueryParams{
		CallbackQueryID: callback.ID,
		Text:            "‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞",
	})
	if err != nil {
		slog.Error("Error answering callback query", err)
	}
} 